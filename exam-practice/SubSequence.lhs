 A
subsequence of a given sequence is a sequence that can be obtained from the given sequence
by deleting 0 or more elements without changing the order of the remaining elements.

a)(1) Write a function isSubsequence :: (Eq a) =>[a] -> [a] -> Bool that deter-
mines whether the first argument is a subsequence of the second argument.

\begin{code}

isSubsequence :: (Eq a) =>[a] -> [a] -> Bool
isSubsequence [] _ = True
isSubsequence _ [] = False
isSubsequence (x:xs) (y:ys) | x == y = isSubsequence xs ys
                            | otherwise = isSubsequence (x:xs) ys

\end{code}

(b)(2) Write a function subsequences :: [a] -> [[a]] that returns the list of all subse-
quences of the argument. Hint: For every element in the list there are two choices, either
to include it in the subsequence or not to include it.

\begin{code}

subsequences :: [a] -> [[a]]
subsequences [] = [[]]
subsequences (x:xs) = map (x:) (subsequences xs) ++ subsequences xs

\end{code}

(c)(2) Write a function testSubsequences :: (Eq a) =>[a] -> Bool that checks whether
isSubsequence returns true for all lists generated by subsequences.

\begin{code}

testSubsequences :: (Eq a) => [a] -> Bool
testSubsequences xs = all id (map (\seq -> isSubsequence seq xs) (subsequences xs))

\end{code}
